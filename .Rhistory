as.numeric(as.Date(BY$date[1])-as.Date(BY_old$date[nrow(BY_old)]))
dateST <- BY[[1]]
asdateST <- as.Date(dateST, "%Y/%m/%d")
asdateST <- as.Date(dateST)
for(i in 1:length(asdateST)-1){
Tday <-as.numeric(asdateST[i+1]-asdateST[i])
ExpT <- c(ExpT, Tday)
}
dateST <- BY[[1]]
asdateST <- as.Date(dateST)
# for first row
ExpT <- as.numeric(as.Date(BY$date[1])-as.Date(BY_old$date[nrow(BY_old)]))
for(i in 1:length(asdateST)-1){
Tday <-as.numeric(asdateST[i+1]-asdateST[i])
ExpT <- c(ExpT, Tday)
}
View(BY)
View(BY)
length(asdateST)
View(BY)
# T/G
Graticule <- rep(30, length(asdateST))
Tracks <-as.numeric(BY[[3]])
meanTG <- Tracks/Graticule
# T/Area
Area <- 0.004225 # 0.004225 cm^2
TAratio <- meanTG/Area
TAratioDay <- TAratio/ExpT
# finial TA data
TADay <- TAratioDay*0.027
newDataFrame <- data.frame(ID = stnameDataframe[2], date= stnameDataframe[1], TA_Day = TADay, count = stnameDataframe[3])
computeData <- function(stnameDataframe, old_stnameDataframe){
dateST <- stnameDataframe[[1]]
asdateST <- as.Date(dateST)
# for first row
ExpT <- as.numeric(as.Date(stnameDataframe$date[1])-as.Date(old_stnameDataframe$date[nrow(old_stnameDataframe)]))
for(i in 1:length(asdateST)-1){
Tday <-as.numeric(asdateST[i+1]-asdateST[i])
ExpT <- c(ExpT, Tday)
}
# T/G
Graticule <- rep(30, length(asdateST))
Tracks <-as.numeric(stnameDataframe[[3]])
meanTG <- Tracks/Graticule
# T/Area
Area <- 0.004225 # 0.004225 cm^2
TAratio <- meanTG/Area
TAratioDay <- TAratio/ExpT
# finial TA data
TADay <- TAratioDay*0.027
newDataFrame <- data.frame(ID = stnameDataframe[2], date= stnameDataframe[1], TA_Day = TADay, count = stnameDataframe[3])
return(newDataFrame)
}
BY_update <- computeData(BY, BY_old)
View(BY_update)
computeData <- function(stnameDataframe, old_stnameDataframe){
dateST <- stnameDataframe[[1]]
asdateST <- as.Date(dateST)
# for first row
ExpT <- as.numeric(as.Date(stnameDataframe$date[1])-as.Date(old_stnameDataframe$date[nrow(old_stnameDataframe)]))
for(i in 1:length(asdateST)-1){
Tday <-as.numeric(asdateST[i+1]-asdateST[i])
ExpT <- c(ExpT, Tday)
}
# T/G
Graticule <- rep(30, length(asdateST))
Tracks <-as.numeric(stnameDataframe[[3]])
meanTG <- Tracks/Graticule
# T/Area
Area <- 0.004225 # 0.004225 cm^2
TAratio <- meanTG/Area
TAratioDay <- TAratio/ExpT
# finial TA data
TADay <- TAratioDay*0.027
newDataFrame <- data.frame(ID = stnameDataframe[2],
date= stnameDataframe[1],
Tracks = stnameDataframe[3],
Graticule= Graticule,
Exposure.T = ExpT,
T.G = meanTG,
T.Area = TAratio,
TDay = TAratioDay,
TA_Day = TADay)
return(newDataFrame)
}
BY_update <- computeData(BY, BY_old)
BYH_update <- computeData(BYH, BYH_old)
SYK_update <- computeData(SYK, SYK_old)
DYK_update <- computeData(DYK, DYK_old)
GTP_update <- computeData(GTP, GTP_old)
SF1_update <- computeData(SF1, SF1_old)
SF2_update <- computeData(SF2, SF2_old)
SF3_update <- computeData(SF3, SF3_old)
SF4_update <- computeData(SF4, SF4_old)
View(SF2_update)
View(SF4)
gs_add_row(ss=TVG_flim, ws = "BY", input = BY_update) # 新增資料
computeData <- function(stnameDataframe, old_stnameDataframe){
dateST <- stnameDataframe[[1]]
asdateST <- as.Date(dateST)
# for first row
ExpT <- as.numeric(as.Date(stnameDataframe$date[1])-as.Date(old_stnameDataframe$date[nrow(old_stnameDataframe)]))
for(i in 1:length(asdateST)-1){
Tday <-as.numeric(asdateST[i+1]-asdateST[i])
ExpT <- c(ExpT, Tday)
}
# T/G
Area <- rep(0.004225, length(asdateST))
Graticule <- rep(30, length(asdateST))
Tracks <-as.numeric(stnameDataframe[[3]])
meanTG <- Tracks/Graticule
# T/Area
Area <- 0.004225 # 0.004225 cm^2
TAratio <- meanTG/Area
TAratioDay <- TAratio/ExpT
# finial TA data
TADay <- TAratioDay*0.027
newDataFrame <- data.frame(ID = stnameDataframe[2],
date= stnameDataframe[1],
Tracks = stnameDataframe[3],
Graticule= Graticule,
Exposure.T = ExpT,
T.G = meanTG,
T.Area = TAratio,
TDay = TAratioDay,
TA_Day = TADay,
Area = Area)
return(newDataFrame)
}
BYH_update <- computeData(BYH, BYH_old)
SYK_update <- computeData(SYK, SYK_old)
DYK_update <- computeData(DYK, DYK_old)
GTP_update <- computeData(GTP, GTP_old)
SF1_update <- computeData(SF1, SF1_old)
SF2_update <- computeData(SF2, SF2_old)
SF3_update <- computeData(SF3, SF3_old)
gs_add_row(ss=TVG_flim, ws = "BYH", input = BYH_update) # 新增資料
gs_add_row(ss=TVG_flim, ws = "SYK", input = SYK_update) # 新增資料
gs_add_row(ss=TVG_flim, ws = "DYK", input = DYK_update) # 新增資料
gs_add_row(ss=TVG_flim, ws = "GTP", input = GTP_update) # 新增資料
gs_add_row(ss=TVG_flim, ws = "SF1", input = SF1_update) # 新增資料
gs_add_row(ss=TVG_flim, ws = "SF2", input = SF2_update) # 新增資料
gs_add_row(ss=TVG_flim, ws = "SF3", input = SF3_update) # 新增資料
write.csv(BY_update, "c://YMSData/updataDate/update/BY_update.cvs" )
write.csv(BYH_update, "c://YMSData/updataDate/update/BYH_update.cvs" )
write.csv(SYK_update, "c://YMSData/updataDate/update/SYK_update.cvs" )
write.csv(DYK_update, "c://YMSData/updataDate/update/DYK_update.cvs" )
write.csv(GTP_update, "c://YMSData/updataDate/update/GTP_update.cvs" )
write.csv(SF1_update, "c://YMSData/updataDate/update/SF1_update.cvs" )
write.csv(SF2_update, "c://YMSData/updataDate/update/SF2_update.cvs" )
write.csv(SF3_update, "c://YMSData/updataDate/update/SF3_update.cvs" )
write.csv(BY_update, "c://YMSData/updataDate/update/BY_update.csv" )
write.csv(BYH_update, "c://YMSData/updataDate/update/BYH_update.csv" )
write.csv(SYK_update, "c://YMSData/updataDate/update/SYK_update.csv" )
write.csv(DYK_update, "c://YMSData/updataDate/update/DYK_update.csv" )
write.csv(GTP_update, "c://YMSData/updataDate/update/GTP_update.csv" )
write.csv(SF1_update, "c://YMSData/updataDate/update/SF1_update.csv" )
write.csv(SF2_update, "c://YMSData/updataDate/update/SF2_update.csv" )
write.csv(SF3_update, "c://YMSData/updataDate/update/SF3_update.csv" )
setwd('c://YMSData')
write.csv(BY_update, "c://YMSData/updataDate/update/BY_update.csv" )
write.csv(BYH_update, "c://YMSData/updataDate/update/BYH_update.csv" )
write.csv(SYK_update, "c://YMSData/updataDate/update/SYK_update.csv" )
write.csv(DYK_update, "c://YMSData/updataDate/update/DYK_update.csv" )
write.csv(GTP_update, "c://YMSData/updataDate/update/GTP_update.csv" )
write.csv(SF1_update, "c://YMSData/updataDate/update/SF1_update.csv" )
write.csv(SF2_update, "c://YMSData/updataDate/update/SF2_update.csv" )
write.csv(SF3_update, "c://YMSData/updataDate/update/SF3_update.csv" )
write.csv(BY_update, "c://YMSData/updateDate/update/BY_update.csv" )
write.csv(BYH_update, "c://YMSData/updateDate/update/BYH_update.csv" )
write.csv(SYK_update, "c://YMSData/updateDate/update/SYK_update.csv" )
write.csv(DYK_update, "c://YMSData/updateDate/update/DYK_update.csv" )
write.csv(GTP_update, "c://YMSData/updateDate/update/GTP_update.csv" )
write.csv(SF1_update, "c://YMSData/updateDate/update/SF1_update.csv" )
write.csv(SF2_update, "c://YMSData/updateDate/update/SF2_update.csv" )
write.csv(SF3_update, "c://YMSData/updateDate/update/SF3_update.csv" )
write.csv(BY_update, "C://YMSData/updateData/update/BY_update.csv" )
write.csv(BYH_update, "c://YMSData/updateData/update/BYH_update.csv" )
write.csv(SYK_update, "c://YMSData/updateData/update/SYK_update.csv" )
write.csv(DYK_update, "c://YMSData/updateData/update/DYK_update.csv" )
write.csv(GTP_update, "c://YMSData/updateData/update/GTP_update.csv" )
write.csv(SF1_update, "c://YMSData/updateData/update/SF1_update.csv" )
write.csv(SF2_update, "c://YMSData/updateData/update/SF2_update.csv" )
write.csv(SF3_update, "c://YMSData/updateData/update/SF3_update.csv" )
as.Date("2016-09-04")-15
View(SF1)
View(SF1)
countdf <- read.table('C:/Users/ycsung/Desktop/OLYMPUS Capture/2017-08-02/2017-08-02/Results.txt', header = T)
countdf <- countdf[1:nrow(countdf)-1,]
split_sample <- strsplit(as.character(countdf$FileName), split="_", fixed=T)
## build
date <- c()
site <- c()
no_sample <- c()
for(i in 1:length(split_sample)){
date <- c(date, split_sample[[i]][1])
site <- c(site,  split_sample[[i]][2])
no_sample <- c(no_sample,  split_sample[[i]][3])
}
no_sample <- sub(".JPG", replacement ="", no_sample)
sample_df <- data.frame(date, site, no_sample, count = countdf$Results)
different_date <- unique(sample_df$date)
mean_count <- c()
total_count <- c()
date <- c()
site <- c()
for(i in 1:length(different_date)){
every_date_all_data <- subset(sample_df, sample_df$date == different_date[i])
different_site <- unique(every_date_all_data$site)
for(j in 1:length(different_site)){
one_site <- subset(every_date_all_data, every_date_all_data$site == different_site[j])
date <- c(date, as.vector(different_date[[i]]))
site <- c(site, as.vector(different_site[[j]]))
total_count <- c(total_count, sum(one_site$count))
mean_count <- c(mean_count, mean(one_site$count))
}
}
count_dataFrame <- data.frame(date, site, total_count, mean_count)
count_dataFrame$date <- as.Date(count_dataFrame$date)
write.csv(count_dataFrame, paste("c://YMSData/dataWrite/", count_dataFrame$date[1], "_TO_", count_dataFrame$date[nrow(count_dataFrame)], ".csv", sep = ""))
setwd('c://YMSData')
# read csv
new_data <- read.csv("dataWrite/2017-05-03_TO_2017-05-19.csv")
new_data <- new_data[ , -1]
station_list <- c("BY", "BYH", "SYK", "DYK", "GTP", "SF1", "SF2", "SF3", "SF4")
station_old_list1 <- c("BY_old", "BYH_old", "SYK_old")
station_old_list2 <- c("DYK_old", "GTP_old", "SF1_old")
station_old_list3 <- c("SF2_old", "SF3_old", "SF4_old")
station_old_list <- c(station_old_list1, station_old_list2, station_old_list3)
for (i in 1:length(station_list)){
# station_list[i] : data frame 命名
assign(station_list[i], subset(new_data, new_data$site==station_list[i]))
}
gs_auth(new_user = TRUE) # 與帳戶建立新的受權
TVG_flim <- gs_title('TVG_SF_film') # 讀取帳戶中名為"testFile"的 Spreadsheet
for (i in 1:length(station_old_list1)){
assign(station_old_list1[i], gs_read(ss=TVG_flim, ws = station_list[i], skip=0))
}
for (i in 1:length(station_old_list2)){
assign(station_old_list2[i], gs_read(ss=TVG_flim, ws = station_list[i+3], skip=0))
}
for (i in 1:length(station_old_list3)){
assign(station_old_list3[i], gs_read(ss=TVG_flim, ws = station_list[i+6], skip=0))
}
computeData <- function(stnameDataframe, old_stnameDataframe){
dateST <- stnameDataframe[[1]]
asdateST <- as.Date(dateST)
# for first row
ExpT <- as.numeric(as.Date(stnameDataframe$date[1])-as.Date(old_stnameDataframe$date[nrow(old_stnameDataframe)]))
for(i in 1:length(asdateST)-1){
Tday <-as.numeric(asdateST[i+1]-asdateST[i])
ExpT <- c(ExpT, Tday)
}
# T/G
Area <- rep(0.004225, length(asdateST))
Graticule <- rep(30, length(asdateST))
Tracks <-as.numeric(stnameDataframe[[3]])
meanTG <- Tracks/Graticule
# T/Area
Area <- 0.004225 # 0.004225 cm^2
TAratio <- meanTG/Area
TAratioDay <- TAratio/ExpT
# finial TA data
TADay <- TAratioDay*0.027
newDataFrame <- data.frame(ID = stnameDataframe[2],
date= stnameDataframe[1],
Tracks = stnameDataframe[3],
Graticule= Graticule,
Exposure.T = ExpT,
T.G = meanTG,
T.Area = TAratio,
TDay = TAratioDay,
TA_Day = TADay,
Area = Area)
return(newDataFrame)
}
BY_update <- computeData(BY, BY_old)
BYH_update <- computeData(BYH, BYH_old)
SYK_update <- computeData(SYK, SYK_old)
DYK_update <- computeData(DYK, DYK_old)
GTP_update <- computeData(GTP, GTP_old)
SF1_update <- computeData(SF1, SF1_old)
SF2_update <- computeData(SF2, SF2_old)
SF3_update <- computeData(SF3, SF3_old)
#SF4_update <- computeData(SF4, SF4_old)
gs_add_row(ss=TVG_flim, ws = "BY", input = BY_update) # 新增資料
gs_add_row(ss=TVG_flim, ws = "BYH", input = BYH_update) # 新增資料
gs_add_row(ss=TVG_flim, ws = "SYK", input = SYK_update) # 新增資料
gs_add_row(ss=TVG_flim, ws = "DYK", input = DYK_update) # 新增資料
gs_add_row(ss=TVG_flim, ws = "GTP", input = GTP_update) # 新增資料
gs_add_row(ss=TVG_flim, ws = "SF1", input = SF1_update) # 新增資料
gs_add_row(ss=TVG_flim, ws = "SF2", input = SF2_update) # 新增資料
gs_add_row(ss=TVG_flim, ws = "SF3", input = SF3_update) # 新增資料
#gs_add_row(ss=TVG_flim, ws = "BY", input = SF4_update) # 新增資料
write.csv(BY_update, "C://YMSData/updateData/update/BY_update.csv" )
write.csv(BYH_update, "c://YMSData/updateData/update/BYH_update.csv" )
write.csv(SYK_update, "c://YMSData/updateData/update/SYK_update.csv" )
write.csv(DYK_update, "c://YMSData/updateData/update/DYK_update.csv" )
write.csv(GTP_update, "c://YMSData/updateData/update/GTP_update.csv" )
write.csv(SF1_update, "c://YMSData/updateData/update/SF1_update.csv" )
write.csv(SF2_update, "c://YMSData/updateData/update/SF2_update.csv" )
write.csv(SF3_update, "c://YMSData/updateData/update/SF3_update.csv" )
SF4_update <- computeData(SF4, SF4_old)
View(SF4)
for (i in 1:length(station_old_list3)){
assign(station_old_list3[i], gs_read(ss=TVG_flim, ws = station_list[i+6], skip=0))
}
SF4_update <- computeData(SF4, SF4_old)
gs_add_row(ss=TVG_flim, ws = "SF4", input = SF4_update) # 新增資料
SF3_update <- computeData(SF3, SF3_old)
SF4_update <- computeData(SF4, SF4_old)
SF3_update <- computeData(SF3, SF3_old)
gs_add_row(ss=TVG_flim, ws = "SF3", input = SF3_update) # 新增資料
for (i in 1:length(station_old_list3)){
assign(station_old_list3[i], gs_read(ss=TVG_flim, ws = station_list[i+6], skip=0))
}
TVG_flim <- gs_title('TVG_SF_film') # 讀取帳戶中名為"testFile"的 Spreadsheet
for (i in 1:length(station_old_list3)){
assign(station_old_list3[i], gs_read(ss=TVG_flim, ws = station_list[i+6], skip=0))
}
SF3_update <- computeData(SF3, SF3_old)
gs_add_row(ss=TVG_flim, ws = "SF3", input = SF3_update) # 新增資料
for (i in 1:length(station_old_list2)){
assign(station_old_list2[i], gs_read(ss=TVG_flim, ws = station_list[i+3], skip=0))
}
SF1_update <- computeData(SF1, SF1_old)
SF2_update <- computeData(SF2, SF2_old)
gs_add_row(ss=TVG_flim, ws = "SF1", input = SF1_update) # 新增資料
gs_add_row(ss=TVG_flim, ws = "SF2", input = SF2_update) # 新增資料
write.csv(SF1_update, "c://YMSData/updateData/update/SF1_update.csv" )
write.csv(SF2_update, "c://YMSData/updateData/update/SF2_update.csv" )
write.csv(SF4_update, "c://YMSData/updateData/update/SF4_update.csv" )
TVG_flim <- gs_title('TVG_SF_film') # 讀取帳戶中名為"testFile"的 Spreadsheet
for (i in 1:length(station_old_list3)){
assign(station_old_list3[i], gs_read(ss=TVG_flim, ws = station_list[i+6], skip=0))
}
SF2_update <- computeData(SF2, SF2_old)
gs_add_row(ss=TVG_flim, ws = "SF2", input = SF2_update) # 新增資料
write.csv(SF2_update, "c://YMSData/updateData/update/SF2_update.csv" )
Zhudong <- StationAllTable("竹東", "2017-07-24", "2017-07-31")
Hutoupi <- StationAllTable_engName("Hutoupi", "2017-07-24", "2017-07-31")
JS <- StationAllTable("礁溪", "2017-07-24", "2017-07-31")
Beiliao <- StationAllTable("北寮", "2017-07-24", "2017-07-31")
FS <- StationAllTable("鳳山", "2017-07-24", "2017-07-31")
GS <- StationAllTable("金山", "2017-07-24", "2017-07-31")
YMS <- StationAllTable_engName("ZHUZIHU", "2017-07-24", "2017-07-31")
#YMS <- StationAllTable_engName("ZHUZIHU", "2016-09-01", "2016-09-02")
#YMS <- StationAllTable_engName("ZHUZIHU", (Sys.Date()-1), (Sys.Date()-1))
write.csv(Zhudong, "c://Taiwan-CWB-Data/writeCSV/竹東.csv")
write.csv(Hutoupi, "c://Taiwan-CWB-Data/writeCSV/虎頭埤.csv")
write.csv(JS, "c://Taiwan-CWB-Data/writeCSV/礁溪.csv")
write.csv(Beiliao, "c://Taiwan-CWB-Data/writeCSV/北寮.csv")
write.csv(FS, "c://Taiwan-CWB-Data/writeCSV/鳳山.csv")
write.csv(GS, "c://Taiwan-CWB-Data/writeCSV/金山.csv")
write.csv(YMS, "c://Taiwan-CWB-Data/writeCSV/竹子湖.csv")
# Library Packages
library(magrittr)
library(httr)
library(rvest)
library(stringr)
library(reshape2)
library(knitr)
setwd('c:/Taiwan-CWB-Data')
Sys.setlocale(category = "LC_ALL", locale = "")
getDataformCWB <- function(station, timerange1, timerange2, iterm){
# ---------- input Targat Station ---------- #
# Load Station List
stationList <- read.csv("data/new_Station_List.csv")
inputStationName <- c(station) # "Location"
# ---------- input Date ---------- #
fromdate <- as.Date(timerange1) # "2017-01-06"
todate <- as.Date(timerange2) # "2017-01-06"
date <- seq.Date(fromdate, todate, "day")
lengthDate <- as.numeric(length(date))
lengthDatep <- as.numeric(lengthDate+1)
# ---------- URL ---------- #
url_1 <- "http://e-service.cwb.gov.tw/HistoryDataQuery/DayDataController.do?command=viewMain&station="
url_2 <- "&stname=%25E7%25AB%25B9%25E6%259D%25B1&datepicker="
url_1_1 <- paste(url_1, stationList$id, sep = "")
url_all <- paste(url_1_1, url_2, sep = "")
stationListnew <- cbind(stationList, url_all)
substation <- data.frame(subset(stationListnew, stationListnew$Name == inputStationName))
subdataframe <-data.frame(date=date, urldate = paste(substation$url_all, date ,sep=""))
# ---------- Xpath ---------- #
inputxpathName <- c(iterm) # "ex: press"
# Rain
xpathrain <- "//table[@id='MyTable']/tbody/tr/td[11]" # Xpath for rain data
# Hum
xpathHum <- "//table[@id='MyTable']/tbody/tr/td[6]" # Xpath for RH data
# Tem
xpathTtem <- "//table[@id='MyTable']/tbody/tr/td[4]" # Xpath for Temperature data
# Press
xpathPres <- "//table[@id='MyTable']/tbody/tr/td[2]" # Xpath for StnPres data
XpathName <- c("Rain", "Hum", "Tem", "Press")
xpathurl <- c(xpathrain, xpathHum, xpathTtem, xpathPres)
xpathList <- data.frame(XpathName, xpathurl)
xpathselect_dataframe <- subset(xpathList, xpathList$XpathName == inputxpathName)
xpathSelect_result <- as.vector(xpathselect_dataframe$xpathurl)
#-----
hr24 <- data.frame(Hour=1:24) # set one day time
for (i in 1:lengthDate){
urlhtml <- as.vector(subdataframe$urldate[i])# as.vector(date_dataFrame$urldate[1])
# doc <- read_html(urls)
datadoc <-read_html(urlhtml)# read_html(as.vector(date_dataFrame$urldate[1]))
data <- datadoc %>%
html_nodes(., xpath = xpathSelect_result)%>%
html_text
data_renew <- str_trim(sub("<U+00A0>",replacement ="",data)) # Delete something we don't need
hr24 <-cbind(hr24, data_renew)
}
names(hr24)[2:lengthDatep] <- as.vector(as.factor(date))
hr24_all <- melt(hr24, id=c("Hour") ) # Let them for one column
names(hr24_all) <- c("hour", "date", "data")
POStime <- as.POSIXct(paste(hr24_all$date, hr24_all$hour, sep = " "), "%Y-%m-%d %H", tz="GMT")
resultTable <- data.frame(time=POStime, data= hr24_all$data)
names(resultTable)[2] <-c(iterm)
return(resultTable)
}
getDataformCWB_ENG <- function(station, timerange1, timerange2, iterm){
# ---------- input Targat Station ---------- #
# Load Station List
stationList <- read.csv("data/new_Station_List.csv")
inputStationName <- c(station) # "Location"
# ---------- input Date ---------- #
fromdate <- as.Date(timerange1) # "2017-01-06"
todate <- as.Date(timerange2) # "2017-01-06"
date <- seq.Date(fromdate, todate, "day")
lengthDate <- as.numeric(length(date))
lengthDatep <- as.numeric(lengthDate+1)
# ---------- URL ---------- #
url_1 <- "http://e-service.cwb.gov.tw/HistoryDataQuery/DayDataController.do?command=viewMain&station="
url_2 <- "&stname=%25E7%25AB%25B9%25E6%259D%25B1&datepicker="
url_1_1 <- paste(url_1, stationList$id, sep = "")
url_all <- paste(url_1_1, url_2, sep = "")
stationListnew <- cbind(stationList, url_all)
substation <- data.frame(subset(stationListnew, stationListnew$engName == inputStationName))
subdataframe <-data.frame(date=date, urldate = paste(substation$url_all, date ,sep=""))
# ---------- Xpath ---------- #
inputxpathName <- c(iterm) # "ex: press"
# Rain
xpathrain <- "//table[@id='MyTable']/tbody/tr/td[11]" # Xpath for rain data
# Hum
xpathHum <- "//table[@id='MyTable']/tbody/tr/td[6]" # Xpath for RH data
# Tem
xpathTtem <- "//table[@id='MyTable']/tbody/tr/td[4]" # Xpath for Temperature data
# Press
xpathPres <- "//table[@id='MyTable']/tbody/tr/td[2]" # Xpath for StnPres data
XpathName <- c("Rain", "Hum", "Tem", "Press")
xpathurl <- c(xpathrain, xpathHum, xpathTtem, xpathPres)
xpathList <- data.frame(XpathName, xpathurl)
xpathselect_dataframe <- subset(xpathList, xpathList$XpathName == inputxpathName)
xpathSelect_result <- as.vector(xpathselect_dataframe$xpathurl)
#-----
hr24 <- data.frame(Hour=1:24) # set one day time
for (i in 1:lengthDate){
urlhtml <- as.vector(subdataframe$urldate[i])# as.vector(date_dataFrame$urldate[1])
# doc <- read_html(urls)
datadoc <-read_html(urlhtml)# read_html(as.vector(date_dataFrame$urldate[1]))
data <- datadoc %>%
html_nodes(., xpath = xpathSelect_result)%>%
html_text
data_renew <- str_trim(sub("<U+00A0>",replacement ="",data)) # Delete something we don't need
hr24 <-cbind(hr24, data_renew)
}
names(hr24)[2:lengthDatep] <- as.vector(as.factor(date))
hr24_all <- melt(hr24, id=c("Hour") ) # Let them for one column
names(hr24_all) <- c("hour", "date", "data")
POStime <- as.POSIXct(paste(hr24_all$date, hr24_all$hour, sep = " "), "%Y-%m-%d %H", tz="GMT")
resultTable <- data.frame(time=POStime, data= hr24_all$data)
names(resultTable)[2] <-c(iterm)
return(resultTable)
}
StationAllTable <- function(station, StartDate, EndDate){
station_Press <- getDataformCWB(station, StartDate, EndDate, "Press")
station_Hum <- getDataformCWB(station, StartDate, EndDate, "Hum")
station_Tem <- getDataformCWB(station, StartDate, EndDate, "Tem")
station_Rain <- getDataformCWB(station, StartDate, EndDate, "Rain")
Starion_All <- data.frame(time=station_Press[[1]],
rf = station_Rain[[2]],
Press = station_Press[[2]],
temperture = station_Tem[[2]],
Hum = station_Hum[[2]])
return(Starion_All)
}
StationAllTable_engName <- function(station, StartDate, EndDate){
station_Press <- getDataformCWB_ENG(station, StartDate, EndDate, "Press")
station_Hum <- getDataformCWB_ENG(station, StartDate, EndDate, "Hum")
station_Tem <- getDataformCWB_ENG(station, StartDate, EndDate, "Tem")
station_Rain <- getDataformCWB_ENG(station, StartDate, EndDate, "Rain")
Starion_All <- data.frame(time=station_Press[[1]],
rf = station_Rain[[2]],
Press = station_Press[[2]],
temperture = station_Tem[[2]],
Hum = station_Hum[[2]])
return(Starion_All)
}
Zhudong <- StationAllTable("竹東", "2017-07-24", "2017-07-31")
Hutoupi <- StationAllTable_engName("Hutoupi", "2017-07-24", "2017-07-31")
JS <- StationAllTable("礁溪", "2017-07-24", "2017-07-31")
Beiliao <- StationAllTable("北寮", "2017-07-24", "2017-07-31")
FS <- StationAllTable("鳳山", "2017-07-24", "2017-07-31")
GS <- StationAllTable("金山", "2017-07-24", "2017-07-31")
YMS <- StationAllTable_engName("ZHUZIHU", "2017-07-24", "2017-07-31")
#YMS <- StationAllTable_engName("ZHUZIHU", "2016-09-01", "2016-09-02")
#YMS <- StationAllTable_engName("ZHUZIHU", (Sys.Date()-1), (Sys.Date()-1))
write.csv(Zhudong, "c://Taiwan-CWB-Data/writeCSV/竹東.csv")
write.csv(Hutoupi, "c://Taiwan-CWB-Data/writeCSV/虎頭埤.csv")
write.csv(JS, "c://Taiwan-CWB-Data/writeCSV/礁溪.csv")
write.csv(Beiliao, "c://Taiwan-CWB-Data/writeCSV/北寮.csv")
write.csv(FS, "c://Taiwan-CWB-Data/writeCSV/鳳山.csv")
write.csv(GS, "c://Taiwan-CWB-Data/writeCSV/金山.csv")
write.csv(YMS, "c://Taiwan-CWB-Data/writeCSV/竹子湖.csv")
