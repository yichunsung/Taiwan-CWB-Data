library(spdep)
library(maptools)
library(sp)
library(rgeos)
readShapeSpatial("C:\Users\ycsung\Desktop\SHP_F0012\F0012大甲斷層活動斷層地質敏感區-公告範圍(TWD97).shp")
test_shpfile <- readShapeSpatial("C:/Users/ycsung/Desktop/SHP_F0012/F0012大甲斷層活動斷層地質敏感區-公告範圍(TWD97).shp")
plot(test_shpfile)
test_2_shp <- readShapeSpatial("C:/Users/ycsung/Desktop/NCREE/ArcGis/map/Town67_region.shp")
plot(test_2_shp)
eaflet() %>% setView(lng = 122, lat = 24, zoom = 13) %>%
addTiles() %>%
addGeoJSON(test_2_shp, weight = 1, color = "#444444", fill = FALSE)
leaflet() %>% setView(lng = 122, lat = 24, zoom = 13) %>%
addTiles() %>%
addGeoJSON(test_2_shp, weight = 1, color = "#444444", fill = FALSE)
fault_shp <- readShapeSpatial("C:/Users/ycsung/Desktop/NCREE/ArcGis/map/全台活動斷層33條_990519修正/全台活動斷層.shp")
plot(fault_shp)
test_2_shp
TaiwanTown_map_dataFrame <- fortify(test_2_shp, region = "CNAME")
ggplot()+ geom_map(data = TaiwanTown_map_dataFrame, aes(map_id = id), map = TaiwanTown_map_dataFrame) + expand_limits(x = TaiwanTown_map_dataFrame$long, y = TaiwanTown_map_dataFrame$lat)
basemap <- get_map(location= "Taiwan", zoom = 7)
library(ggmap)
install.packages('ggmap')
library(ggmap)
basemap <- get_map(location= "Taiwan", zoom = 7)
basemap
ggmap(basemap)
ggmap(basemap)+geom_map(data = TaiwanTown_map_dataFrame, aes(map_id = id), map = TaiwanTown_map_dataFrame) + expand_limits(x = TaiwanTown_map_dataFrame$long, y = TaiwanTown_map_dataFrame$lat)
ggmap(basemap)+geom_map(data = TaiwanTown_map_dataFrame, aes(map_id = id), map = TaiwanTown_map_dataFrame) + expand_limits(x = TaiwanTown_map_dataFrame$long, y = TaiwanTown_map_dataFrame$lat)
fault_map_dataFrame <- fortify(fault_shp, region = "FAULT_NAME") # 將SpatialPolygonsDataFrame 轉成Data.Frame (package 來源: ggplot2)
fault_map_dataFrame <- fortify(fault_shp, region = "FAULT_NAME") # 將SpatialPolygonsDataFrame 轉成Data.Frame (package 來源: ggplot2)
test_2_shp$CNAME
fault_map_dataFrame <- fortify(fault_shp, region = "COUNTRY") # 將SpatialPolygonsDataFrame 轉成Data.Frame (package 來源: ggplot2)
ggplot()+ geom_map(data = fault_map_dataFrame, aes(map_id = id), map = fault_map_dataFrame) + expand_limits(x = fault_map_dataFrame$long, y = fault_map_dataFrame$lat)
ggplot()+ geom_map(data = fault_map_dataFrame, aes(map_id = id), map = fault_map_dataFrame) + expand_limits(x = fault_map_dataFrame$long, y = fault_map_dataFrame$lat)+
geom_map(data = TaiwanTown_map_dataFrame, aes(map_id = id), map = TaiwanTown_map_dataFrame) + expand_limits(x = TaiwanTown_map_dataFrame$long, y = TaiwanTown_map_dataFrame$lat)
ggplot()+ geom_map(data = fault_map_dataFrame, aes(map_id = id), map = fault_map_dataFrame) + expand_limits(x = fault_map_dataFrame$long, y = fault_map_dataFrame$lat)+
+plot(fault_shp)
ggplot(fault_shp)+ geom_map(data = fault_map_dataFrame, aes(map_id = id), map = fault_map_dataFrame) + expand_limits(x = fault_map_dataFrame$long, y = fault_map_dataFrame$lat)+
/
ggplot(fault_shp)+ geom_map(data = fault_map_dataFrame, aes(map_id = id), map = fault_map_dataFrame) + expand_limits(x = fault_map_dataFrame$long, y = fault_map_dataFrame$lat)
ggplot(fault_shp)
ggplot(fault_shp)+ geom_map(data = TaiwanTown_map_dataFrame, aes(map_id = id), map = TaiwanTown_map_dataFrame) + expand_limits(x = TaiwanTown_map_dataFrame$long, y = TaiwanTown_map_dataFrame$lat)
ggplot(fault_shp)
plot(fault_shp)
ggplot(data=fault_map_dataFrame)
library(plotly)
plotly_fault <- plot_ly(data = fault_map_dataFrame, x = fault_map_dataFrame$long, y = fault_map_dataFrame$lat, type = "scatter", mode = "lines")
plotly_fault
plotly_fault <- plot_ly(data = fault_map_dataFrame, x = fault_map_dataFrame$long, y = fault_map_dataFrame$lat, type = "scatter", mode = "markers")
plotly_fault
plotly_fault <- plot_ly(data = fault_map_dataFrame, x = fault_map_dataFrame$long, y = fault_map_dataFrame$lat, type = "scatter", mode = "markers") %>%
add_lines(data = TaiwanTown_map_dataFrame, x = TaiwanTown_map_dataFrame$long, y = TaiwanTown_map_dataFrame$lat)
plotly_fault
plotly_fault <- plot_ly(data = fault_map_dataFrame, x = fault_map_dataFrame$long, y = fault_map_dataFrame$lat, type = "scatter", mode = "markers") %>%
add_lines(data = TaiwanTown_map_dataFrame, x = TaiwanTown_map_dataFrame$long, y = TaiwanTown_map_dataFrame$lat, type = "scatter", mode = "markers")
plotly_fault
plotly_fault <-  plot_ly(data = TaiwanTown_map_dataFrame, x = TaiwanTown_map_dataFrame$long, y = TaiwanTown_map_dataFrame$lat, type = "scatter", mode = "markers")
add_lines(data = fault_map_dataFrame, x = fault_map_dataFrame$long, y = fault_map_dataFrame$lat, type = "scatter", mode = "markers")
plotly_fault <-  plot_ly(data = TaiwanTown_map_dataFrame, x = TaiwanTown_map_dataFrame$long, y = TaiwanTown_map_dataFrame$lat, type = "scatter", mode = "markers") %>%
add_lines(data = fault_map_dataFrame, x = fault_map_dataFrame$long, y = fault_map_dataFrame$lat, type = "scatter", mode = "markers")
plotly_fault
leaflet() %>% addTiles() %>% setView(lng=121.539366, lat=25.017326, zoom = 6) %>%
addWMSTiles(
WMSURL,
layers = Layer_TaipeiCityStratum,
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Weather data © 2012 IEM Nexrad"
)
WMSURL <- "http://gis.moeacgs.gov.tw/geo4oracle/mapagent/mapagent.fcgi"
Layer_TaipeiCityStratum <- "WMS2009/LAYER/G67_A_50KA1PL_P"
leaflet() %>% addTiles() %>% setView(lng=121.539366, lat=25.017326, zoom = 6) %>%
addWMSTiles(
WMSURL,
layers = Layer_TaipeiCityStratum,
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Weather data © 2012 IEM Nexrad"
)
leaflet() %>% addTiles() %>% setView(lng=121.539366, lat=25.017326, zoom = 6) %>%
addWMSTiles(
"http://gis.moeacgs.gov.tw/geo4oracle/mapagent/mapagent.fcgi",
layers = Layer_TaipeiCityStratum,
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Weather data © 2012 IEM Nexrad"
)
leaflet() %>% addTiles() %>% setView(lng=121.539366, lat=25.017326, zoom = 6) %>%
addWMSTiles(
"http://gis.moeacgs.gov.tw/geo4oracle/mapagent/mapagent.fcgi?Request=GetMap&SERVICE=WMS&VERSION=1.1.1& LAYERS=WMS/LAYER/TW/G97_TW_LANDSLIDE_P_2009& FORMAT=image/png&BGCOLOR=0xFFFFFF&TRANSPARENT=TRUE&SRS=EPSG:4326& BBOX=121.551988,25.017193,121.578647,25.042173&width=500&height=500",
layers = Layer_TaipeiCityStratum,
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Weather data © 2012 IEM Nexrad"
)
leaflet() %>% addTiles() %>% setView(lng=121.539366, lat=25.017326, zoom = 6) %>%
addWMSTiles(
"http://gis.moeacgs.gov.tw/geo4oracle/mapagent/mapagent.fcgi?Request=GetMap&SERVICE=WMS&VERSION=1.1.1& LAYERS=WMS/LAYER/TW/G97_TW_LANDSLIDE_P_2009& FORMAT=image/png&BGCOLOR=0xFFFFFF&TRANSPARENT=TRUE&SRS=EPSG:4326& BBOX=121.551988,25.017193,121.578647,25.042173&width=500&height=500",
layers = "WMS2009/LAYER/G67_A_50KA1PL_P",
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Weather data © 2012 IEM Nexrad"
)
leaflet() %>% addTiles() %>% setView(lng=121.539366, lat=25.017326, zoom = 6) %>%
addWMSTiles(
"http://gis.moeacgs.gov.tw/geo4oracle/mapagent/mapagent.fcgi?Request=GetMap&SERVICE=WMS&VERSION=1.1.1",
layers = "WMS2009/LAYER/G67_A_50KA1PL_P",
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Weather data © 2012 IEM Nexrad"
)
leaflet() %>% addTiles() %>% setView(lng=121.539366, lat=25.017326, zoom = 10) %>%
addWMSTiles(
"http://gis.moeacgs.gov.tw/geo4oracle/mapagent/mapagent.fcgi?Request=GetMap&SERVICE=WMS&VERSION=1.1.1",
layers = "WMS2009/LAYER/G67_A_50KA1PL_P",
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Weather data © 2012 IEM Nexrad"
)
leaflet() %>% addTiles() %>% setView(lng=121.539366, lat=25.017326, zoom = 10) %>%
addWMSTiles(
"http://gis.moeacgs.gov.tw/mapguide/mapagent/mapagent.fcgi?service=wms&VERSION=1.1.1&REQUEST=GetMap&SRS=EPSG%3A4326&WIDTH=512&HEIGHT=512&bbox=118.610970%2C22.320657%2C123.801392%2C25.126028&LAYERS=GSB98-1/LAYER/50K/G67_TW_50KZ3P_M_2009%2CGSB98-1/LAYER/50K/G67_TW_50KZ3P_P_2009&STYLES=&TRANSPARENT=TRUE&FORMAT=image/png",
layers = "WMS2009/LAYER/G67_A_50KA1PL_P",
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Weather data © 2012 IEM Nexrad"
)
leaflet() %>% addTiles() %>% setView(lng=121.539366, lat=25.017326, zoom = 10) %>%
addWMSTiles(
"http://data.gov.tw/iisi/logaccess/2508?dataUrl=http://gis.moeacgs.gov.tw/mapguide/mapagent/mapagent.fcgi",
layers = "WMS2009/LAYER/G67_A_50KA1PL_P",
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Weather data © 2012 IEM Nexrad"
)
leaflet() %>% addTiles() %>% setView(lng=121.539366, lat=25.017326, zoom = 10) %>%
addWMSTiles(
"http://gis.moeacgs.gov.tw/mapguide/mapagent/mapagent.fcgi",
layers = "GSB98-1/LAYER/50K/G67_TW_50KZ3P_M_2009",
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Weather data © 2012 IEM Nexrad"
)
rep(9, times = 5)
ggplot(data=fault_map_dataFrame)+ geom_map(data = TaiwanTown_map_dataFrame, aes(map_id = id), map = TaiwanTown_map_dataFrame) + expand_limits(x = TaiwanTown_map_dataFrame$long, y = TaiwanTown_map_dataFrame$lat)
test_shpfile <- readShapeSpatial("C:/Users/ycsung/Desktop/SHP_F0012/F0012大甲斷層活動斷層地質敏感區-公告範圍(TWD97).shp")
plot(test_shpfile)
test_shpfile <- readShapeSpatial("C:/Users/ycsung/Desktop/SHP_F0012/F0012大甲斷層活動斷層地質敏感區-公告範圍(TWD97).shp")
plot(test_shpfile)
plot(test_shpfile)
View(TaiwanTown_map_dataFrame)
View(TaiwanTown_map_dataFrame)
ggplot(fault_shp)+ geom_map(data = fault_map_dataFrame, aes(map_id = id), map = fault_map_dataFrame) + expand_limits(x = fault_map_dataFrame$long, y = fault_map_dataFrame$lat)
ggmap(basemap)
test_2_shp <- readShapeSpatial("C:/Users/ycsung/Desktop/NCREE/ArcGis/map/Town67_region.shp")
plot(test_2_shp)
plot(test_shpfile)
View(strawHatPirate)
View(fault_map_dataFrame)
plot(fault_shp)
setwd('c://R_Application/map')
Sys.setlocale(category = "LC_ALL", locale = "")
TaiwanRegion97_shp <- readShapeSpatial("shpData/Taiwan_region_97TM2/97TM2.shp")
plot(TaiwanRegion97_shp)
library(magrittr)
library(ggplot2)
library(leaflet)
library(knitr)
library(spdep)
install.packages('spdep')
library(magrittr)
library(ggplot2)
library(leaflet)
library(knitr)
library(maptools)
library(sp)
library(rgeos)
?readShapeSpatial
head(slot(test_2_shp,"data"))
head(test_2_shp@data)
head(test_2_shp@polygons)
ggplot(fault_shp)+ geom_map(data = TaiwanTown_map_dataFrame, aes(map_id = id), map = TaiwanTown_map_dataFrame) + expand_limits(x = TaiwanTown_map_dataFrame$long, y = TaiwanTown_map_dataFrame$lat)
leaflet() %>% addTiles() %>% setView(lng=121.539366, lat=25.017326, zoom = 10) %>%
addWMSTiles("(http://gis.moeacgs.gov.tw/Geo4Oracle/mapagent/mapagent.fcgi?",
layers =  "WMS2009/LAYER/G67_A_50KA1PL_L",
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Taiwan"
)
leaflet() %>% addTiles() %>% setView(lng=121.539366, lat=25.017326, zoom = 10) %>%
addWMSTiles("http://gis.moeacgs.gov.tw/geo4oracle/mapagent/mapagent.fcgi",
layers =  "WMS2009/LAYER/G67_A_50KA1PL_L",
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Taiwan"
)
dsn <- "WMS:http://gis.moeacgs.gov.tw/geo4oracle/mapagent/mapagent.fcgi?Request=GetMap&SERVICE=WMS&VERSION=1.1.1&BGCOLOR=0xFFFFFF&TRANSPARENT=TRUE&SRS=EPSG:4326&FORMAT=image/png&LAYERS=,WMS2009/LAYER/G67_A_50KA1PL_L&BBOX=121.551988,25.017193,121.578647,25.042173"
ogrinfo(dsn, so=TRUE)
library(gdalUtils)
install.packages('gdalUtils')
library(gdalUtils)
library(rgdal)
dsn <- "WMS:http://gis.moeacgs.gov.tw/geo4oracle/mapagent/mapagent.fcgi?Request=GetMap&SERVICE=WMS&VERSION=1.1.1&BGCOLOR=0xFFFFFF&TRANSPARENT=TRUE&SRS=EPSG:4326&FORMAT=image/png&LAYERS=,WMS2009/LAYER/G67_A_50KA1PL_L&BBOX=121.551988,25.017193,121.578647,25.042173"
ogrinfo(dsn, so=TRUE)
?readGDAL
leaflet() %>% addTiles() %>% setView(lng=121.539366, lat=25.017326, zoom = 10) %>%
addWMSTiles("http://gis.moeacgs.gov.tw/geo4oracle/mapagent/mapagent.fcgi",
#layers =  "WMS2009/LAYER/G67_A_50KA1PL_L",
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Taiwan"
)
?addWMSTiles
leaflet() %>% setView(lng=121.539366, lat=25.017326, zoom = 10) %>%
addWMSTiles("http://gis.moeacgs.gov.tw/geo4oracle/mapagent/mapagent.fcgi",
#layers =  "WMS2009/LAYER/G67_A_50KA1PL_L",
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Taiwan"
)
leaflet() %>% addTiles() %>% setView(lng=121.539366, lat=25.017326, zoom = 10) %>%
addWMSTiles("http://gis.moeacgs.gov.tw/geo4oracle/mapagent/mapagent.fcgi",
#layers =  "WMS2009/LAYER/G67_A_50KA1PL_L",
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Taiwan"
)
addWMSTiles("http://gis.moeacgs.gov.tw/geo4oracle/mapagent/mapagent.fcgi",
#layers =  "WMS2009/LAYER/G67_A_50KA1PL_L",
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Taiwan"
)
map <- leaflet()
addWMSTiles(map, "http://gis.moeacgs.gov.tw/geo4oracle/mapagent/mapagent.fcgi",
#layers =  "WMS2009/LAYER/G67_A_50KA1PL_L",
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Taiwan"
)
leaflet() %>% addTiles() %>% setView(lng=121.539366, lat=25.017326, zoom = 10) %>%
addWMSTiles("http://gis.moeacgs.gov.tw/geo4oracle/mapagent/mapagent.fcgi",
layers =  " WMS2009/LAYER/G67_A_50KA1PL_P",
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Taiwan"
)
leaflet() %>% addTiles() %>% setView(lng=121.539366, lat=25.017326, zoom = 10) %>%
addWMSTiles("http://gis.moeacgs.gov.tw/geo4oracle/mapagent/mapagent.fcgi",
layers =  "WMS2009/LAYER/G67_A_50KA1PL_P",
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Taiwan"
)
leaflet() %>% addTiles() %>% setView(lng=121.539366, lat=25.017326, zoom = 10) %>%
addWMSTiles("http://gis.moeacgs.gov.tw/geo4oracle/mapagent/mapagent.fcgi",
layers =  "G67_A_50KA1PL_P",
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Taiwan"
)
leaflet() %>% addTiles() %>% setView(lng=121.539366, lat=25.017326, zoom = 10) %>%
addWMSTiles("http://gis.moeacgs.gov.tw/geo4oracle/mapagent/mapagent.fcgi",
layers =  "WMS2009/LAYER/250K/G67_TW_LIZA1A1PLL_L_1974_ALLSCALE",
options = WMSTileOptions(format = "image/png", transparent = TRUE),
attribution = "Taiwan"
)
library(devtools)
install.packages("devtools")
library(devtools)
library(devtools)
library(devtools)
install.packages("devtools")
packages_to_use <- c("devtools", "roxygen2")
install.packages(packages_to_use)
lapply(packages_to_use, library, character.only = TRUE)
install_github("yichunsung/transtwd97")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("yichunsung/transtwd97")
install_github("yichunsung/transtwd97")
library(devtools)
install_github("yichunsung/transtwd97")
library(transtwd97)
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("yichunsung/transtwd97")
install_github("yaojenkuo/medianpack")
devtools::install_github("yichunsung/transtwd97")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("devtools")
install.packages("devtools")
install.packages('devtools')
install.packages("devtools")
library(googlesheets)
JS_url <- "https://docs.google.com/spreadsheets/d/1jNSjtLo5PJnJh8it_SkZ1ZnDVMxo1gRZbHcMxhjbZAU/edit?usp=sharing"
JS_data <- gs_url(JS_url)
JS_data <- gs_url(JS_url)
JS_url <- "https://docs.google.com/spreadsheets/d/11VFUdSCfZahqIuaO5eAvtCyyIjpnnYkG4w7KliiY_fc/edit?usp=sharing"
JS_data <- gs_url(JS_url)
JS_url <- "https://docs.google.com/spreadsheets/d/11VFUdSCfZahqIuaO5eAvtCyyIjpnnYkG4w7KliiY_fc"
JS_data <- gs_url(JS_url)
library(googlesheets)
JS_url <- "https://docs.google.com/spreadsheets/d/11VFUdSCfZahqIuaO5eAvtCyyIjpnnYkG4w7KliiY_fc/edit?usp=sharing"
JS_data <- gs_url(JS_url)
JS_url <- "https://docs.google.com/spreadsheets/d/11VFUdSCfZahqIuaO5eAvtCyyIjpnnYkG4w7KliiY_fc/edit?usp=sharing"
JS_data <- gs_url(JS_url)
JSKEY_url <- "https://docs.google.com/spreadsheets/d/11VFUdSCfZahqIuaO5eAvtCyyIjpnnYkG4w7KliiY_fc"
library(googlesheets)
JS_data <- gs_url(JSKEY_url)
gs_ls()
JSKEY_url <- "https://docs.google.com/spreadsheets/d/11VFUdSCfZahqIuaO5eAvtCyyIjpnnYkG4w7KliiY_fc"
JS_data <- gs_url(JSKEY_url)
JS_data <- gs_url(JS_url)
gs_user()
JS_url <- "https://docs.google.com/spreadsheets/d/11VFUdSCfZahqIuaO5eAvtCyyIjpnnYkG4w7KliiY_fc/edit?usp=sharing"
JS_data <- gs_url(JS_url)
JS_url <- "https://docs.google.com/spreadsheets/d/11VFUdSCfZahqIuaO5eAvtCyyIjpnnYkG4w7KliiY_fc/edit?usp=sharing"
JS_data <- gs_url(JS_url)
gs_deauth()
library(googlesheets)
gs_auth()
gs_auth(new_user = TRUE)
JS_url <- "https://docs.google.com/spreadsheets/d/11VFUdSCfZahqIuaO5eAvtCyyIjpnnYkG4w7KliiY_fc/edit?usp=sharing"
JS_data <- gs_url(JS_url)
JS_data
gs_auth(new_user = TRUE)
gs_user()
JS_url <- "https://docs.google.com/spreadsheets/d/11VFUdSCfZahqIuaO5eAvtCyyIjpnnYkG4w7KliiY_fc/edit?usp=sharing"
JS22_data <- gs_url(JS_url)
install.packages('plotly')
install.packages("plotly")
install.packages("plotly")
install.packages("plot_ly")
JSKEY_url <- "https://docs.google.com/spreadsheets/d/11VFUdSCfZahqIuaO5eAvtCyyIjpnnYkG4w7KliiY_fc"
JS22_data <- gs_url(JS_url)
library(googlesheets)
JS22_data <- gs_url(JS_url)
gs_auth(new_user = TRUE)
gs_user()
gs_ls()
install.packages('ggmap')
library(ggmap)
init_map <- get_map(location = c(lon = 121.593937, lat = 25.223013), zoom = 13, language = "zh-TW", maptype = "terrain")
init_map
init_map <- get_map(location = c(lon = 121.593937, lat = 25.223013), zoom = 13, language = "zh-TW", maptype = "terrain")
init_map
ggmap(init_map)
init_map <- get_map(location = c(lon = 121.593937, lat = 25.223013), zoom = 13, language = "zh-TW", maptype = "terrain")
ggmap(init_map)
install.packages('ggmap')
install.packages("ggmap")
library(ggmap)
init_map <- get_map(location = c(lon = 121.593937, lat = 25.223013), zoom = 13, language = "zh-TW", maptype = "terrain")
ggmap(init_map)
map <- get_map(location = c(lon = 120.233937, lat = 22.993013),
zoom = 10, language = "zh-TW")
ggmap(map)
library(ggplot2)
map <- get_map(location = c(lon = 120.233937, lat = 22.993013),
zoom = 10, language = "zh-TW")
ggmap(map)
install.packages('ggproto')
GS <- StationAllTable("金山", "2015-07-30", "2015-08-09")
YMS <- StationAllTable_engName("ZHUZIHU", "2015-07-30", "2015-08-09")
# Library Packages
library(magrittr)
library(httr)
library(rvest)
library(stringr)
library(reshape2)
library(knitr)
setwd('c:/Taiwan-CWB-Data')
Sys.setlocale(category = "LC_ALL", locale = "")
getDataformCWB <- function(station, timerange1, timerange2, iterm){
# ---------- input Targat Station ---------- #
# Load Station List
stationList <- read.csv("data/new_Station_List.csv")
inputStationName <- c(station) # "Location"
# ---------- input Date ---------- #
fromdate <- as.Date(timerange1) # "2017-01-06"
todate <- as.Date(timerange2) # "2017-01-06"
date <- seq.Date(fromdate, todate, "day")
lengthDate <- as.numeric(length(date))
lengthDatep <- as.numeric(lengthDate+1)
# ---------- URL ---------- #
url_1 <- "http://e-service.cwb.gov.tw/HistoryDataQuery/DayDataController.do?command=viewMain&station="
url_2 <- "&stname=%25E7%25AB%25B9%25E6%259D%25B1&datepicker="
url_1_1 <- paste(url_1, stationList$id, sep = "")
url_all <- paste(url_1_1, url_2, sep = "")
stationListnew <- cbind(stationList, url_all)
substation <- data.frame(subset(stationListnew, stationListnew$Name == inputStationName))
subdataframe <-data.frame(date=date, urldate = paste(substation$url_all, date ,sep=""))
# ---------- Xpath ---------- #
inputxpathName <- c(iterm) # "ex: press"
# Rain
xpathrain <- "//table[@id='MyTable']/tbody/tr/td[11]" # Xpath for rain data
# Hum
xpathHum <- "//table[@id='MyTable']/tbody/tr/td[6]" # Xpath for RH data
# Tem
xpathTtem <- "//table[@id='MyTable']/tbody/tr/td[4]" # Xpath for Temperature data
# Press
xpathPres <- "//table[@id='MyTable']/tbody/tr/td[2]" # Xpath for StnPres data
XpathName <- c("Rain", "Hum", "Tem", "Press")
xpathurl <- c(xpathrain, xpathHum, xpathTtem, xpathPres)
xpathList <- data.frame(XpathName, xpathurl)
xpathselect_dataframe <- subset(xpathList, xpathList$XpathName == inputxpathName)
xpathSelect_result <- as.vector(xpathselect_dataframe$xpathurl)
#-----
hr24 <- data.frame(Hour=1:24) # set one day time
for (i in 1:lengthDate){
urlhtml <- as.vector(subdataframe$urldate[i])# as.vector(date_dataFrame$urldate[1])
# doc <- read_html(urls)
datadoc <-read_html(urlhtml)# read_html(as.vector(date_dataFrame$urldate[1]))
data <- datadoc %>%
html_nodes(., xpath = xpathSelect_result)%>%
html_text
data_renew <- str_trim(sub("<U+00A0>",replacement ="",data)) # Delete something we don't need
hr24 <-cbind(hr24, data_renew)
}
names(hr24)[2:lengthDatep] <- as.vector(as.factor(date))
hr24_all <- melt(hr24, id=c("Hour") ) # Let them for one column
names(hr24_all) <- c("hour", "date", "data")
POStime <- as.POSIXct(paste(hr24_all$date, hr24_all$hour, sep = " "), "%Y-%m-%d %H", tz="GMT")
resultTable <- data.frame(time=POStime, data= hr24_all$data)
names(resultTable)[2] <-c(iterm)
return(resultTable)
}
getDataformCWB_ENG <- function(station, timerange1, timerange2, iterm){
# ---------- input Targat Station ---------- #
# Load Station List
stationList <- read.csv("data/new_Station_List.csv")
inputStationName <- c(station) # "Location"
# ---------- input Date ---------- #
fromdate <- as.Date(timerange1) # "2017-01-06"
todate <- as.Date(timerange2) # "2017-01-06"
date <- seq.Date(fromdate, todate, "day")
lengthDate <- as.numeric(length(date))
lengthDatep <- as.numeric(lengthDate+1)
# ---------- URL ---------- #
url_1 <- "http://e-service.cwb.gov.tw/HistoryDataQuery/DayDataController.do?command=viewMain&station="
url_2 <- "&stname=%25E7%25AB%25B9%25E6%259D%25B1&datepicker="
url_1_1 <- paste(url_1, stationList$id, sep = "")
url_all <- paste(url_1_1, url_2, sep = "")
stationListnew <- cbind(stationList, url_all)
substation <- data.frame(subset(stationListnew, stationListnew$engName == inputStationName))
subdataframe <-data.frame(date=date, urldate = paste(substation$url_all, date ,sep=""))
# ---------- Xpath ---------- #
inputxpathName <- c(iterm) # "ex: press"
# Rain
xpathrain <- "//table[@id='MyTable']/tbody/tr/td[11]" # Xpath for rain data
# Hum
xpathHum <- "//table[@id='MyTable']/tbody/tr/td[6]" # Xpath for RH data
# Tem
xpathTtem <- "//table[@id='MyTable']/tbody/tr/td[4]" # Xpath for Temperature data
# Press
xpathPres <- "//table[@id='MyTable']/tbody/tr/td[2]" # Xpath for StnPres data
XpathName <- c("Rain", "Hum", "Tem", "Press")
xpathurl <- c(xpathrain, xpathHum, xpathTtem, xpathPres)
xpathList <- data.frame(XpathName, xpathurl)
xpathselect_dataframe <- subset(xpathList, xpathList$XpathName == inputxpathName)
xpathSelect_result <- as.vector(xpathselect_dataframe$xpathurl)
#-----
hr24 <- data.frame(Hour=1:24) # set one day time
for (i in 1:lengthDate){
urlhtml <- as.vector(subdataframe$urldate[i])# as.vector(date_dataFrame$urldate[1])
# doc <- read_html(urls)
datadoc <-read_html(urlhtml)# read_html(as.vector(date_dataFrame$urldate[1]))
data <- datadoc %>%
html_nodes(., xpath = xpathSelect_result)%>%
html_text
data_renew <- str_trim(sub("<U+00A0>",replacement ="",data)) # Delete something we don't need
hr24 <-cbind(hr24, data_renew)
}
names(hr24)[2:lengthDatep] <- as.vector(as.factor(date))
hr24_all <- melt(hr24, id=c("Hour") ) # Let them for one column
names(hr24_all) <- c("hour", "date", "data")
POStime <- as.POSIXct(paste(hr24_all$date, hr24_all$hour, sep = " "), "%Y-%m-%d %H", tz="GMT")
resultTable <- data.frame(time=POStime, data= hr24_all$data)
names(resultTable)[2] <-c(iterm)
return(resultTable)
}
StationAllTable <- function(station, StartDate, EndDate){
station_Press <- getDataformCWB(station, StartDate, EndDate, "Press")
station_Hum <- getDataformCWB(station, StartDate, EndDate, "Hum")
station_Tem <- getDataformCWB(station, StartDate, EndDate, "Tem")
station_Rain <- getDataformCWB(station, StartDate, EndDate, "Rain")
Starion_All <- data.frame(time=station_Press[[1]],
rf = station_Rain[[2]],
Press = station_Press[[2]],
temperture = station_Tem[[2]],
Hum = station_Hum[[2]])
return(Starion_All)
}
StationAllTable_engName <- function(station, StartDate, EndDate){
station_Press <- getDataformCWB_ENG(station, StartDate, EndDate, "Press")
station_Hum <- getDataformCWB_ENG(station, StartDate, EndDate, "Hum")
station_Tem <- getDataformCWB_ENG(station, StartDate, EndDate, "Tem")
station_Rain <- getDataformCWB_ENG(station, StartDate, EndDate, "Rain")
Starion_All <- data.frame(time=station_Press[[1]],
rf = station_Rain[[2]],
Press = station_Press[[2]],
temperture = station_Tem[[2]],
Hum = station_Hum[[2]])
return(Starion_All)
}
GS <- StationAllTable("金山", "2015-07-30", "2015-08-09")
YMS <- StationAllTable_engName("ZHUZIHU", "2015-07-30", "2015-08-09")
View(YMS)
View(GS)
Zhudong <- StationAllTable("竹東", "2017-09-28", "2017-10-04")
Hutoupi <- StationAllTable_engName("Hutoupi", "2017-09-28", "2017-10-04")
JS <- StationAllTable("礁溪", "2017-09-28", "2017-10-04")
Beiliao <- StationAllTable("北寮", "2017-09-28", "2017-10-04")
FS <- StationAllTable("鳳山", "2017-09-28", "2017-10-04")
GS <- StationAllTable("金山", "2015-07-30", "2015-08-09")
YMS <- StationAllTable_engName("ZHUZIHU", "2015-07-30", "2015-08-09")
#YMS <- StationAllTable_engName("ZHUZIHU", "2017-09-28", "2017-10-04")
write.csv(Zhudong, "c://Taiwan-CWB-Data/writeCSV/竹東.csv")
write.csv(Hutoupi, "c://Taiwan-CWB-Data/writeCSV/虎頭埤.csv")
write.csv(JS, "c://Taiwan-CWB-Data/writeCSV/礁溪.csv")
write.csv(Beiliao, "c://Taiwan-CWB-Data/writeCSV/北寮.csv")
write.csv(FS, "c://Taiwan-CWB-Data/writeCSV/鳳山.csv")
write.csv(GS, "c://Taiwan-CWB-Data/writeCSV/金山.csv")
write.csv(YMS, "c://Taiwan-CWB-Data/writeCSV/竹子湖.csv")
